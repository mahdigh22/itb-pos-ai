{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["import { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst db = getFirestore(app);\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;AACP;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACrE,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/settings/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { PriceList } from '@/lib/types';\n\nconst SETTINGS_COLLECTION = 'settings';\nconst MAIN_SETTINGS_DOC = 'main';\n\ninterface Settings {\n    taxRate: number;\n    priceLists: PriceList[];\n    activePriceListId?: string;\n}\n\nexport async function getSettings(): Promise<Settings> {\n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n            return docSnap.data() as Settings;\n        } else {\n            // Default settings if document doesn't exist\n            const defaultSettings: Settings = {\n                taxRate: 8.0,\n                priceLists: [\n                    { id: 'pl-1', name: 'Default', discount: 0 },\n                    { id: 'pl-2', name: 'Happy Hour', discount: 20 },\n                    { id: 'pl-3', name: 'Employee Discount', discount: 50 },\n                ],\n                activePriceListId: 'pl-1',\n            };\n            await setDoc(docRef, defaultSettings);\n            return defaultSettings;\n        }\n    } catch (error) {\n        console.error(\"Error fetching settings: \", error);\n        // Fallback to default settings on error\n        return { taxRate: 8.0, priceLists: [], activePriceListId: undefined };\n    }\n}\n\nexport async function saveTaxRate(newRate: number) {\n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, { taxRate: newRate });\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error saving tax rate: \", error);\n        return { success: false, error: 'Failed to save tax rate.' };\n    }\n}\n\nexport async function saveActivePriceList(priceListId: string | null) {\n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, { activePriceListId: priceListId || null });\n        revalidatePath('/admin/settings');\n        revalidatePath('/'); // For POS\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error saving active price list: \", error);\n        return { success: false, error: 'Failed to save active price list.' };\n    }\n}\n\nexport async function addPriceList(formData: FormData) {\n    const newPriceList: PriceList = {\n        id: `pl-${Date.now()}`,\n        name: formData.get('name') as string,\n        discount: parseFloat(formData.get('discount') as string),\n    };\n    \n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, {\n            priceLists: arrayUnion(newPriceList)\n        });\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error adding price list: \", error);\n        return { success: false, error: 'Failed to add price list.' };\n    }\n}\n\nexport async function updatePriceList(id: string, formData: FormData) {\n    const updatedPriceList: Partial<PriceList> = {\n        name: formData.get('name') as string,\n        discount: parseFloat(formData.get('discount') as string),\n    };\n    \n    try {\n        const settings = await getSettings();\n        const updatedPriceLists = settings.priceLists.map(pl => \n            pl.id === id ? { ...pl, ...updatedPriceList } : pl\n        );\n        \n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, { priceLists: updatedPriceLists });\n\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error updating price list: \", error);\n        return { success: false, error: 'Failed to update price list.' };\n    }\n}\n\nexport async function deletePriceList(id: string) {\n    try {\n        const settings = await getSettings();\n        const updatedPriceLists = settings.priceLists.filter(pl => pl.id !== id);\n        \n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        \n        const updateData: { priceLists: PriceList[], activePriceListId?: string | null } = {\n            priceLists: updatedPriceLists\n        };\n\n        // If the deleted price list was the active one, reset it.\n        if (settings.activePriceListId === id) {\n            updateData.activePriceListId = null;\n        }\n\n        await updateDoc(docRef, updateData);\n\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error deleting price list: \", error);\n        return { success: false, error: 'Failed to delete price list.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/settings/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getSettings as '00ddf0070dce5d04f377bccd95ae69f8b7c30641a1'} from 'ACTIONS_MODULE0'\nexport {addPriceList as '4066cd514554654f6a0904494e4a827c859351a35f'} from 'ACTIONS_MODULE0'\nexport {saveTaxRate as '4068969fac0cf20858ead05a84c7aa098c3e4618fd'} from 'ACTIONS_MODULE0'\nexport {deletePriceList as '406e902d5a7f2d77f2811015053cb046b78a3e44e0'} from 'ACTIONS_MODULE0'\nexport {saveActivePriceList as '408af85ba1b105a3310ff1d1a453bc93a608205aad'} from 'ACTIONS_MODULE0'\nexport {updatePriceList as '6026e9d5e2a6f3654ea88b77d2777a4e12c01ce789'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/admin/settings-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/admin/settings-client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/admin/settings-client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4S,GACzU,0EACA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/admin/settings-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/admin/settings-client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/admin/settings-client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwR,GACrT,sDACA","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 447, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/settings/page.tsx"],"sourcesContent":["import SettingsClient from '@/components/admin/settings-client';\nimport { getSettings } from './actions';\n\nexport default async function AdminSettingsPage() {\n    const settings = await getSettings();\n\n    return (\n        <SettingsClient \n            initialTaxRate={settings.taxRate} \n            initialPriceLists={settings.priceLists}\n            initialActivePriceListId={settings.activePriceListId}\n        />\n    );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe;IAC1B,MAAM,WAAW,MAAM,CAAA,GAAA,0IAAA,CAAA,cAAW,AAAD;IAEjC,qBACI,8OAAC,iJAAA,CAAA,UAAc;QACX,gBAAgB,SAAS,OAAO;QAChC,mBAAmB,SAAS,UAAU;QACtC,0BAA0B,SAAS,iBAAiB;;;;;;AAGhE","debugId":null}}]
}