{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/menu/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { MenuItem, Category, Ingredient } from '@/lib/types';\n\n// Menu Item Actions\nexport async function addMenuItem(formData: FormData) {\n  const ingredientLinksString = formData.get('ingredientLinks') as string;\n  const ingredientLinks = ingredientLinksString ? JSON.parse(ingredientLinksString) : [];\n\n  const newItemData: Omit<MenuItem, 'id' | 'cost'> = {\n    name: formData.get('name') as string,\n    description: formData.get('description') as string,\n    price: parseFloat(formData.get('price') as string),\n    category: formData.get('category') as string,\n    imageUrl: formData.get('imageUrl') as string || `https://placehold.co/600x400.png`,\n    imageHint: 'food placeholder',\n    preparationTime: parseInt(formData.get('preparationTime') as string, 10) || 5,\n    ingredientLinks: ingredientLinks,\n  };\n\n  try {\n    await addDoc(collection(db, 'menuItems'), newItemData);\n    revalidatePath('/admin/menu');\n    revalidatePath('/');\n    return { success: true };\n  } catch (e) {\n    console.error('Error adding document: ', e);\n    return { success: false, error: 'Failed to add menu item.' };\n  }\n}\n\nexport async function updateMenuItem(id: string, formData: FormData) {\n    const ingredientLinksString = formData.get('ingredientLinks') as string;\n    const ingredientLinks = ingredientLinksString ? JSON.parse(ingredientLinksString) : [];\n\n    const itemUpdates = {\n        name: formData.get('name') as string,\n        description: formData.get('description') as string,\n        price: parseFloat(formData.get('price') as string),\n        category: formData.get('category') as string,\n        imageUrl: formData.get('imageUrl') as string || `https://placehold.co/600x400.png`,\n        preparationTime: parseInt(formData.get('preparationTime') as string, 10) || 5,\n        ingredientLinks: ingredientLinks,\n    };\n    \n    try {\n        await updateDoc(doc(db, 'menuItems', id), itemUpdates);\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error updating document: ', e);\n        return { success: false, error: 'Failed to update menu item.' };\n    }\n}\n\nexport async function deleteMenuItem(id: string) {\n    try {\n        await deleteDoc(doc(db, 'menuItems', id));\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error deleting document: ', e);\n        return { success: false, error: 'Failed to delete menu item.' };\n    }\n}\n\n\nexport async function getMenuItems(): Promise<MenuItem[]> {\n  try {\n    const [menuItemsSnapshot, ingredientsSnapshot] = await Promise.all([\n        getDocs(collection(db, 'menuItems')),\n        getDocs(collection(db, 'ingredients'))\n    ]);\n\n    const ingredientsMap = new Map<string, Ingredient>();\n    ingredientsSnapshot.forEach(doc => {\n        const data = doc.data();\n        ingredientsMap.set(doc.id, { \n          id: doc.id,\n          name: data.name,\n          stock: data.stock || 0,\n          unit: data.unit || 'units',\n          cost: data.cost || 0,\n        } as Ingredient);\n    });\n\n    const items: MenuItem[] = [];\n    menuItemsSnapshot.forEach((doc) => {\n      const data = doc.data();\n      const menuItem = { id: doc.id, ...data } as MenuItem;\n      \n      let calculatedCost = 0;\n\n      // Resolve ingredient links\n      if (menuItem.ingredientLinks) {\n          menuItem.ingredients = menuItem.ingredientLinks\n            .map(link => {\n                const ingredient = ingredientsMap.get(link.ingredientId);\n                if (ingredient) {\n                    calculatedCost += (ingredient.cost || 0) * (link.quantity || 0);\n                    return { \n                      ...ingredient, \n                      isOptional: link.isOptional, \n                      quantity: link.quantity || 1, // Default quantity to 1 if not specified\n                    };\n                }\n                return null;\n            })\n            .filter(Boolean) as MenuItem['ingredients'];\n      }\n      \n      menuItem.cost = calculatedCost;\n      items.push(menuItem);\n    });\n\n    return items.sort((a,b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching menu items: \", error);\n    return [];\n  }\n}\n\n// Category Actions\nexport async function addCategory(formData: FormData) {\n  const newCategory = {\n    name: formData.get('name') as string,\n  };\n\n  try {\n    await addDoc(collection(db, 'categories'), newCategory);\n    revalidatePath('/admin/menu');\n    revalidatePath('/');\n    return { success: true };\n  } catch (e) {\n    console.error('Error adding document: ', e);\n    return { success: false, error: 'Failed to add category.' };\n  }\n}\n\n\nexport async function updateCategory(id: string, formData: FormData) {\n    const categoryUpdates = {\n        name: formData.get('name') as string,\n    };\n    try {\n        await updateDoc(doc(db, 'categories', id), categoryUpdates);\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error updating document: ', e);\n        return { success: false, error: 'Failed to update category.' };\n    }\n}\n\nexport async function deleteCategory(id: string) {\n    try {\n        // TODO: Add logic to handle menu items in this category\n        await deleteDoc(doc(db, 'categories', id));\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error deleting document: ', e);\n        return { success: false, error: 'Failed to delete category.' };\n    }\n}\n\n\nexport async function getCategories(): Promise<Category[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'categories'));\n    const categories: Category[] = [];\n    querySnapshot.forEach((doc) => {\n      categories.push({ id: doc.id, ...doc.data() } as Category);\n    });\n    return categories.sort((a,b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching categories: \", error);\n    return [];\n  }\n}\n"],"names":[],"mappings":";;;;;;IA+KsB,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/menu/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { MenuItem, Category, Ingredient } from '@/lib/types';\n\n// Menu Item Actions\nexport async function addMenuItem(formData: FormData) {\n  const ingredientLinksString = formData.get('ingredientLinks') as string;\n  const ingredientLinks = ingredientLinksString ? JSON.parse(ingredientLinksString) : [];\n\n  const newItemData: Omit<MenuItem, 'id' | 'cost'> = {\n    name: formData.get('name') as string,\n    description: formData.get('description') as string,\n    price: parseFloat(formData.get('price') as string),\n    category: formData.get('category') as string,\n    imageUrl: formData.get('imageUrl') as string || `https://placehold.co/600x400.png`,\n    imageHint: 'food placeholder',\n    preparationTime: parseInt(formData.get('preparationTime') as string, 10) || 5,\n    ingredientLinks: ingredientLinks,\n  };\n\n  try {\n    await addDoc(collection(db, 'menuItems'), newItemData);\n    revalidatePath('/admin/menu');\n    revalidatePath('/');\n    return { success: true };\n  } catch (e) {\n    console.error('Error adding document: ', e);\n    return { success: false, error: 'Failed to add menu item.' };\n  }\n}\n\nexport async function updateMenuItem(id: string, formData: FormData) {\n    const ingredientLinksString = formData.get('ingredientLinks') as string;\n    const ingredientLinks = ingredientLinksString ? JSON.parse(ingredientLinksString) : [];\n\n    const itemUpdates = {\n        name: formData.get('name') as string,\n        description: formData.get('description') as string,\n        price: parseFloat(formData.get('price') as string),\n        category: formData.get('category') as string,\n        imageUrl: formData.get('imageUrl') as string || `https://placehold.co/600x400.png`,\n        preparationTime: parseInt(formData.get('preparationTime') as string, 10) || 5,\n        ingredientLinks: ingredientLinks,\n    };\n    \n    try {\n        await updateDoc(doc(db, 'menuItems', id), itemUpdates);\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error updating document: ', e);\n        return { success: false, error: 'Failed to update menu item.' };\n    }\n}\n\nexport async function deleteMenuItem(id: string) {\n    try {\n        await deleteDoc(doc(db, 'menuItems', id));\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error deleting document: ', e);\n        return { success: false, error: 'Failed to delete menu item.' };\n    }\n}\n\n\nexport async function getMenuItems(): Promise<MenuItem[]> {\n  try {\n    const [menuItemsSnapshot, ingredientsSnapshot] = await Promise.all([\n        getDocs(collection(db, 'menuItems')),\n        getDocs(collection(db, 'ingredients'))\n    ]);\n\n    const ingredientsMap = new Map<string, Ingredient>();\n    ingredientsSnapshot.forEach(doc => {\n        const data = doc.data();\n        ingredientsMap.set(doc.id, { \n          id: doc.id,\n          name: data.name,\n          stock: data.stock || 0,\n          unit: data.unit || 'units',\n          cost: data.cost || 0,\n        } as Ingredient);\n    });\n\n    const items: MenuItem[] = [];\n    menuItemsSnapshot.forEach((doc) => {\n      const data = doc.data();\n      const menuItem = { id: doc.id, ...data } as MenuItem;\n      \n      let calculatedCost = 0;\n\n      // Resolve ingredient links\n      if (menuItem.ingredientLinks) {\n          menuItem.ingredients = menuItem.ingredientLinks\n            .map(link => {\n                const ingredient = ingredientsMap.get(link.ingredientId);\n                if (ingredient) {\n                    calculatedCost += (ingredient.cost || 0) * (link.quantity || 0);\n                    return { \n                      ...ingredient, \n                      isOptional: link.isOptional, \n                      quantity: link.quantity || 1, // Default quantity to 1 if not specified\n                    };\n                }\n                return null;\n            })\n            .filter(Boolean) as MenuItem['ingredients'];\n      }\n      \n      menuItem.cost = calculatedCost;\n      items.push(menuItem);\n    });\n\n    return items.sort((a,b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching menu items: \", error);\n    return [];\n  }\n}\n\n// Category Actions\nexport async function addCategory(formData: FormData) {\n  const newCategory = {\n    name: formData.get('name') as string,\n  };\n\n  try {\n    await addDoc(collection(db, 'categories'), newCategory);\n    revalidatePath('/admin/menu');\n    revalidatePath('/');\n    return { success: true };\n  } catch (e) {\n    console.error('Error adding document: ', e);\n    return { success: false, error: 'Failed to add category.' };\n  }\n}\n\n\nexport async function updateCategory(id: string, formData: FormData) {\n    const categoryUpdates = {\n        name: formData.get('name') as string,\n    };\n    try {\n        await updateDoc(doc(db, 'categories', id), categoryUpdates);\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error updating document: ', e);\n        return { success: false, error: 'Failed to update category.' };\n    }\n}\n\nexport async function deleteCategory(id: string) {\n    try {\n        // TODO: Add logic to handle menu items in this category\n        await deleteDoc(doc(db, 'categories', id));\n        revalidatePath('/admin/menu');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error deleting document: ', e);\n        return { success: false, error: 'Failed to delete category.' };\n    }\n}\n\n\nexport async function getCategories(): Promise<Category[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'categories'));\n    const categories: Category[] = [];\n    querySnapshot.forEach((doc) => {\n      categories.push({ id: doc.id, ...doc.data() } as Category);\n    });\n    return categories.sort((a,b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching categories: \", error);\n    return [];\n  }\n}\n"],"names":[],"mappings":";;;;;;IAyEsB,eAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/extras/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { Extra } from '@/lib/types';\n\nexport async function addExtra(formData: FormData) {\n  const newExtra: Omit<Extra, 'id'> = {\n    name: formData.get('name') as string,\n    price: parseFloat(formData.get('price') as string) || 0,\n  };\n\n  try {\n    await addDoc(collection(db, 'extras'), newExtra);\n    revalidatePath('/admin/extras');\n    revalidatePath('/'); // Revalidate POS page as it uses extras\n    return { success: true };\n  } catch (e) {\n    console.error('Error adding extra: ', e);\n    if (e instanceof Error) {\n        return { success: false, error: e.message };\n    }\n    return { success: false, error: 'Failed to add extra.' };\n  }\n}\n\nexport async function updateExtra(id: string, formData: FormData) {\n    const extraUpdates = {\n        name: formData.get('name') as string,\n        price: parseFloat(formData.get('price') as string) || 0,\n    };\n\n    try {\n        const extraRef = doc(db, 'extras', id);\n        await updateDoc(extraRef, extraUpdates);\n        revalidatePath('/admin/extras');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error updating extra: ', e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to update extra.' };\n    }\n}\n\nexport async function deleteExtra(id: string) {\n    try {\n        await deleteDoc(doc(db, 'extras', id));\n        revalidatePath('/admin/extras');\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error('Error deleting extra: ', e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to delete extra.' };\n    }\n}\n\n\nexport async function getExtras(): Promise<Extra[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'extras'));\n    const extras: Extra[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      extras.push({ \n        id: doc.id,\n        name: data.name,\n        price: data.price || 0,\n       } as Extra);\n    });\n    return extras.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching extras: \", error);\n    return [];\n  }\n}\n"],"names":[],"mappings":";;;;;;IAiEsB,YAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/users/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, Timestamp, doc, getDoc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { Member } from '@/lib/types';\n\nexport async function addUser(formData: FormData) {\n  const newUser: Omit<Member, 'id'> = {\n    name: formData.get('name') as string,\n    email: formData.get('email') as string,\n    phone: formData.get('phone') as string,\n    joined: new Date().toISOString(),\n    avatarUrl: 'https://placehold.co/100x100.png',\n    avatarHint: 'placeholder person',\n  };\n\n  try {\n    await addDoc(collection(db, 'members'), {\n      ...newUser,\n      joined: Timestamp.fromDate(new Date(newUser.joined)), // Store as Firestore Timestamp\n    });\n    revalidatePath('/admin/users');\n    revalidatePath('/');\n    revalidatePath('/members');\n    return { success: true };\n  } catch (e) {\n    console.error('Error adding document: ', e);\n    if (e instanceof Error) {\n        return { success: false, error: e.message };\n    }\n    return { success: false, error: 'Failed to add user.' };\n  }\n}\n\nexport async function updateUser(id: string, formData: FormData) {\n    const userUpdates = {\n        name: formData.get('name') as string,\n        email: formData.get('email') as string,\n        phone: formData.get('phone') as string,\n    };\n\n    try {\n        const userRef = doc(db, 'members', id);\n        await updateDoc(userRef, userUpdates);\n        revalidatePath('/admin/users');\n        revalidatePath('/');\n        revalidatePath('/members');\n        revalidatePath(`/members/${id}`);\n        return { success: true };\n    } catch (e) {\n        console.error('Error updating document: ', e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to update user.' };\n    }\n}\n\nexport async function deleteUser(id: string) {\n    try {\n        await deleteDoc(doc(db, 'members', id));\n        revalidatePath('/admin/users');\n        revalidatePath('/');\n        revalidatePath('/members');\n        return { success: true };\n    } catch (e) {\n        console.error('Error deleting document: ', e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to delete user.' };\n    }\n}\n\nexport async function getUsers(): Promise<Member[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'members'));\n    const members: Member[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      members.push({\n        id: doc.id,\n        name: data.name,\n        email: data.email,\n        phone: data.phone,\n        joined: (data.joined as Timestamp).toDate().toISOString(),\n        avatarUrl: data.avatarUrl,\n        avatarHint: data.avatarHint,\n      });\n    });\n    return members.sort((a,b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching users: \", error);\n    return [];\n  }\n}\n\nexport async function getMember(id: string): Promise<Member | null> {\n    try {\n        const docRef = doc(db, 'members', id);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n            const data = docSnap.data();\n            return {\n                id: docSnap.id,\n                name: data.name,\n                email: data.email,\n                phone: data.phone,\n                joined: (data.joined as Timestamp).toDate().toISOString(),\n                avatarUrl: data.avatarUrl,\n                avatarHint: data.avatarHint,\n            };\n        } else {\n            console.log(\"No such document!\");\n            return null;\n        }\n    } catch (error) {\n        console.error(\"Error fetching member: \", error);\n        return null;\n    }\n}\n"],"names":[],"mappings":";;;;;;IA2EsB,WAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/settings/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { PriceList } from '@/lib/types';\n\nconst SETTINGS_COLLECTION = 'settings';\nconst MAIN_SETTINGS_DOC = 'main';\n\ninterface Settings {\n    taxRate: number;\n    priceLists: PriceList[];\n    activePriceListId?: string;\n}\n\nexport async function getSettings(): Promise<Settings> {\n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n            return docSnap.data() as Settings;\n        } else {\n            // Default settings if document doesn't exist\n            const defaultSettings: Settings = {\n                taxRate: 8.0,\n                priceLists: [\n                    { id: 'pl-1', name: 'Default', discount: 0 },\n                    { id: 'pl-2', name: 'Happy Hour', discount: 20 },\n                    { id: 'pl-3', name: 'Employee Discount', discount: 50 },\n                ],\n                activePriceListId: 'pl-1',\n            };\n            await setDoc(docRef, defaultSettings);\n            return defaultSettings;\n        }\n    } catch (error) {\n        console.error(\"Error fetching settings: \", error);\n        // Fallback to default settings on error\n        return { taxRate: 8.0, priceLists: [], activePriceListId: undefined };\n    }\n}\n\nexport async function saveTaxRate(newRate: number) {\n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, { taxRate: newRate });\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error saving tax rate: \", error);\n        return { success: false, error: 'Failed to save tax rate.' };\n    }\n}\n\nexport async function saveActivePriceList(priceListId: string | null) {\n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, { activePriceListId: priceListId || null });\n        revalidatePath('/admin/settings');\n        revalidatePath('/'); // For POS\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error saving active price list: \", error);\n        return { success: false, error: 'Failed to save active price list.' };\n    }\n}\n\nexport async function addPriceList(formData: FormData) {\n    const newPriceList: PriceList = {\n        id: `pl-${Date.now()}`,\n        name: formData.get('name') as string,\n        discount: parseFloat(formData.get('discount') as string),\n    };\n    \n    try {\n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, {\n            priceLists: arrayUnion(newPriceList)\n        });\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error adding price list: \", error);\n        return { success: false, error: 'Failed to add price list.' };\n    }\n}\n\nexport async function updatePriceList(id: string, formData: FormData) {\n    const updatedPriceList: Partial<PriceList> = {\n        name: formData.get('name') as string,\n        discount: parseFloat(formData.get('discount') as string),\n    };\n    \n    try {\n        const settings = await getSettings();\n        const updatedPriceLists = settings.priceLists.map(pl => \n            pl.id === id ? { ...pl, ...updatedPriceList } : pl\n        );\n        \n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        await updateDoc(docRef, { priceLists: updatedPriceLists });\n\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error updating price list: \", error);\n        return { success: false, error: 'Failed to update price list.' };\n    }\n}\n\nexport async function deletePriceList(id: string) {\n    try {\n        const settings = await getSettings();\n        const updatedPriceLists = settings.priceLists.filter(pl => pl.id !== id);\n        \n        const docRef = doc(db, SETTINGS_COLLECTION, MAIN_SETTINGS_DOC);\n        \n        const updateData: { priceLists: PriceList[], activePriceListId?: string | null } = {\n            priceLists: updatedPriceLists\n        };\n\n        // If the deleted price list was the active one, reset it.\n        if (settings.activePriceListId === id) {\n            updateData.activePriceListId = null;\n        }\n\n        await updateDoc(docRef, updateData);\n\n        revalidatePath('/admin/settings');\n        return { success: true };\n    } catch (error) {\n        console.error(\"Error deleting price list: \", error);\n        return { success: false, error: 'Failed to delete price list.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAgBsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IASsB,YAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAuBsB,WAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA6BsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAyCsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAuIsB,YAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAqKsB,WAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA8MsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAkMsB,oBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/pos/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { collection, addDoc, getDocs, doc, getDoc, Timestamp, query, orderBy, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport type { ActiveOrder, Check, OrderItem, OrderStatus, PriceList } from '@/lib/types';\n\n// Check Actions\nexport async function getChecks(): Promise<Check[]> {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'checks'));\n    const checks: Check[] = [];\n    querySnapshot.forEach((doc) => {\n      checks.push({ id: doc.id, ...doc.data() } as Check);\n    });\n    return checks.sort((a, b) => a.name.localeCompare(b.name));\n  } catch (error) {\n    console.error(\"Error fetching checks: \", error);\n    return [];\n  }\n}\n\nexport async function addCheck(check: Omit<Check, 'id'>): Promise<Check> {\n    const docRef = await addDoc(collection(db, 'checks'), check);\n    revalidatePath('/');\n    return { id: docRef.id, ...check };\n}\n\nexport async function updateCheck(checkId: string, updates: Partial<Omit<Check, 'id'>>) {\n  try {\n    const checkRef = doc(db, 'checks', checkId);\n    await updateDoc(checkRef, updates);\n    // No revalidate needed for this as it's a frequent action\n    return { success: true };\n  } catch (e) {\n    console.error(\"Error updating check: \", e);\n    return { success: false, error: 'Failed to update check.' };\n  }\n}\n\nexport async function deleteCheck(checkId: string) {\n    try {\n        await deleteDoc(doc(db, 'checks', checkId));\n        revalidatePath('/');\n        return { success: true };\n    } catch(e) {\n        console.error(\"Error deleting check: \", e);\n        return { success: false, error: 'Failed to delete check.' };\n    }\n}\n\n\n// Order Actions\nexport async function sendNewItemsToKitchen(checkId: string) {\n    try {\n        const checkRef = doc(db, 'checks', checkId);\n        const checkSnap = await getDoc(checkRef);\n        if (!checkSnap.exists()) {\n            return { success: false, error: 'Check not found.' };\n        }\n\n        const check = { id: checkSnap.id, ...checkSnap.data() } as Check;\n        \n        if (!check.orderType) {\n            return { success: false, error: 'Please select an order type first.' };\n        }\n\n        const newItemsToProcess = check.items.filter(item => item.status === 'new');\n\n        if (newItemsToProcess.length === 0) {\n            return { success: true, message: 'No new items to send.' };\n        }\n\n        // Sanitize items for Firestore by removing client-side populated fields\n        const newItems = newItemsToProcess.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        // Create a new order with only the new items\n        const subtotal = newItems.reduce((acc, item) => {\n            const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n            const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n            return acc + totalItemPrice;\n        }, 0);\n\n        // Fetch settings to apply correct tax and discounts\n        const settingsDoc = await getDoc(doc(db, \"settings\", \"main\"));\n        const settings = settingsDoc.exists() ? settingsDoc.data() : { taxRate: 0, priceLists: [] };\n        const taxRate = settings.taxRate || 0;\n        const priceLists: PriceList[] = settings.priceLists || [];\n        \n        const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n        const discountPercentage = selectedPriceList?.discount || 0;\n        const discountAmount = subtotal * (discountPercentage / 100);\n        const discountedSubtotal = subtotal - discountAmount;\n        const tax = discountedSubtotal * (taxRate / 100);\n        const total = discountedSubtotal + tax;\n        \n        const totalPreparationTime = newItems.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n        const newOrderData = {\n            items: newItems,\n            status: 'Preparing' as OrderStatus,\n            total: total,\n            createdAt: Timestamp.now(),\n            checkName: `${check.name} (Batch)`,\n            totalPreparationTime,\n            orderType: check.orderType,\n            tableNumber: check.tableNumber || null,\n            customerName: check.customerName || null,\n            priceListId: check.priceListId || null,\n            discountApplied: discountPercentage,\n        };\n        await addDoc(collection(db, 'orders'), newOrderData);\n\n        // Update the original check items to 'sent'\n        const updatedItems = check.items.map(item => \n            item.status === 'new' ? { ...item, status: 'sent' as const } : item\n        );\n        await updateDoc(checkRef, { items: updatedItems });\n\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error sending items to kitchen: \", e);\n        if (e instanceof Error) {\n          return { success: false, error: e.message };\n        }\n        return { success: false, error: 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getOrders(): Promise<ActiveOrder[]> {\n  try {\n    const q = query(collection(db, 'orders'), orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    const orders: ActiveOrder[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data();\n      orders.push({\n        id: doc.id,\n        items: data.items,\n        status: data.status,\n        total: data.total,\n        checkName: data.checkName,\n        createdAt: (data.createdAt as Timestamp).toDate(),\n        totalPreparationTime: data.totalPreparationTime,\n        orderType: data.orderType,\n        tableNumber: data.tableNumber,\n        customerName: data.customerName,\n        priceListId: data.priceListId,\n        discountApplied: data.discountApplied,\n      });\n    });\n    return orders;\n  } catch (error) {\n    console.error(\"Error fetching orders: \", error);\n    return [];\n  }\n}\n\n\nexport async function addOrder(orderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date }) {\n    try {\n        // Sanitize items before saving to prevent storing client-side fields\n        const sanitizedItems = orderData.items.map(item => {\n            const { ingredients, cost, ...rest } = item;\n            return rest;\n        });\n\n        const dataToSave = {\n            ...orderData,\n            items: sanitizedItems,\n            createdAt: Timestamp.fromDate(orderData.createdAt),\n            tableNumber: orderData.tableNumber || null,\n            customerName: orderData.customerName || null,\n            priceListId: orderData.priceListId || null,\n        };\n\n        await addDoc(collection(db, 'orders'), dataToSave);\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error adding order: \", e);\n        if (e instanceof Error) {\n            return { success: false, error: e.message };\n        }\n        return { success: false, error: 'Failed to add order.' };\n    }\n}\n\nexport async function updateOrderStatus(orderId: string, status: OrderStatus) {\n    try {\n        const orderRef = doc(db, 'orders', orderId);\n        await updateDoc(orderRef, { status });\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error updating order status: \", e);\n        return { success: false, error: 'Failed to update order status.' };\n    }\n}\n\nexport async function deleteOrder(orderId: string) {\n    try {\n        await deleteDoc(doc(db, 'orders', orderId));\n        revalidatePath('/');\n        return { success: true };\n    } catch (e) {\n        console.error(\"Error deleting order: \", e);\n        return { success: false, error: 'Failed to delete order.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAsDsB,wBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4YACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/pos/menu-display.tsx"],"sourcesContent":["import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PlusCircle, BookOpen } from 'lucide-react';\nimport type { Category, MenuItem } from '@/lib/types';\nimport { ScrollArea } from '../ui/scroll-area';\nimport Link from 'next/link';\nimport { Button } from '../ui/button';\n\ninterface MenuDisplayProps {\n  categories: Category[];\n  menuItems: MenuItem[];\n  onAddItem: (item: MenuItem) => void;\n}\n\nexport default function MenuDisplay({ categories, menuItems, onAddItem }: MenuDisplayProps) {\n  if (categories.length === 0) {\n    return (\n      <Card className=\"h-full flex flex-col\">\n        <CardHeader>\n          <CardTitle className=\"font-headline\">Menu</CardTitle>\n          <CardDescription>Select items to add to the order</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex-1 flex flex-col min-h-0 justify-center items-center text-center text-muted-foreground\">\n            <BookOpen className=\"w-16 h-16 mb-4\"/>\n            <p className=\"font-semibold text-lg\">Your menu is empty.</p>\n            <p className=\"text-sm mb-4\">Add categories and items in the backoffice to get started.</p>\n            <Button asChild>\n                <Link href=\"/admin/menu\">Go to Menu Management</Link>\n            </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader>\n        <CardTitle className=\"font-headline\">Menu</CardTitle>\n        <CardDescription>Select items to add to the order</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1 flex flex-col min-h-0\">\n        <Tabs defaultValue={categories[0].id} className=\"w-full flex-1 flex flex-col min-h-0\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-muted p-1 rounded-lg h-14\">\n            {categories.map((category) => (\n              <TabsTrigger\n                key={category.id}\n                value={category.id}\n                className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:rounded-lg data-[state=active]:shadow-sm h-12 text-base\"\n              >\n                {category.name}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n          {categories.map((category) => (\n            <TabsContent key={category.id} value={category.id} className=\"mt-4 flex-1 min-h-0\">\n              <ScrollArea className=\"h-full\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4 pr-4\">\n                  {menuItems\n                    .filter((item) => item.category === category.id)\n                    .map((item) => (\n                       <Card\n                        key={item.id}\n                        onClick={() => onAddItem(item)}\n                        className=\"group flex flex-col overflow-hidden rounded-lg border-2 border-transparent transition-all hover:border-primary hover:shadow-lg cursor-pointer\"\n                      >\n                        <div className=\"relative w-full h-40\">\n                          <img\n                            src={item.imageUrl}\n                            alt={item.name}\n                            data-ai-hint={item.imageHint}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <CardHeader className=\"flex-grow pb-2\">\n                          <CardTitle className=\"font-headline text-lg\">{item.name}</CardTitle>\n                          <CardDescription className=\"text-sm text-muted-foreground pt-1 line-clamp-2\">\n                            {item.description}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"flex justify-between items-center pt-2\">\n                            <p className=\"font-bold text-xl text-primary\">\n                              ${item.price.toFixed(2)}\n                            </p>\n                            <PlusCircle className=\"h-8 w-8 text-muted-foreground group-hover:text-primary transition-colors\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                </div>\n              </ScrollArea>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;AAQe,SAAS,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAoB;IACxF,IAAI,WAAW,MAAM,KAAK,GAAG;QAC3B,qBACE,6LAAC,mIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,6LAAC,mIAAA,CAAA,aAAU;;sCACT,6LAAC,mIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAgB;;;;;;sCACrC,6LAAC,mIAAA,CAAA,kBAAe;sCAAC;;;;;;;;;;;;8BAEnB,6LAAC,mIAAA,CAAA,cAAW;oBAAC,WAAU;;sCACnB,6LAAC,iNAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;sCACpB,6LAAC;4BAAE,WAAU;sCAAwB;;;;;;sCACrC,6LAAC;4BAAE,WAAU;sCAAe;;;;;;sCAC5B,6LAAC,qIAAA,CAAA,SAAM;4BAAC,OAAO;sCACX,cAAA,6LAAC,+JAAA,CAAA,UAAI;gCAAC,MAAK;0CAAc;;;;;;;;;;;;;;;;;;;;;;;IAKvC;IAEA,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;;kCACT,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAgB;;;;;;kCACrC,6LAAC,mIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACrB,cAAA,6LAAC,mIAAA,CAAA,OAAI;oBAAC,cAAc,UAAU,CAAC,EAAE,CAAC,EAAE;oBAAE,WAAU;;sCAC9C,6LAAC,mIAAA,CAAA,WAAQ;4BAAC,WAAU;sCACjB,WAAW,GAAG,CAAC,CAAC,yBACf,6LAAC,mIAAA,CAAA,cAAW;oCAEV,OAAO,SAAS,EAAE;oCAClB,WAAU;8CAET,SAAS,IAAI;mCAJT,SAAS,EAAE;;;;;;;;;;wBAQrB,WAAW,GAAG,CAAC,CAAC,yBACf,6LAAC,mIAAA,CAAA,cAAW;gCAAmB,OAAO,SAAS,EAAE;gCAAE,WAAU;0CAC3D,cAAA,6LAAC,6IAAA,CAAA,aAAU;oCAAC,WAAU;8CACpB,cAAA,6LAAC;wCAAI,WAAU;kDACZ,UACE,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,SAAS,EAAE,EAC9C,GAAG,CAAC,CAAC,qBACH,6LAAC,mIAAA,CAAA,OAAI;gDAEJ,SAAS,IAAM,UAAU;gDACzB,WAAU;;kEAEV,6LAAC;wDAAI,WAAU;kEACb,cAAA,6LAAC;4DACC,KAAK,KAAK,QAAQ;4DAClB,KAAK,KAAK,IAAI;4DACd,gBAAc,KAAK,SAAS;4DAC5B,WAAU;;;;;;;;;;;kEAGd,6LAAC,mIAAA,CAAA,aAAU;wDAAC,WAAU;;0EACpB,6LAAC,mIAAA,CAAA,YAAS;gEAAC,WAAU;0EAAyB,KAAK,IAAI;;;;;;0EACvD,6LAAC,mIAAA,CAAA,kBAAe;gEAAC,WAAU;0EACxB,KAAK,WAAW;;;;;;;;;;;;kEAGrB,6LAAC,mIAAA,CAAA,cAAW;kEACV,cAAA,6LAAC;4DAAI,WAAU;;8EACb,6LAAC;oEAAE,WAAU;;wEAAiC;wEAC1C,KAAK,KAAK,CAAC,OAAO,CAAC;;;;;;;8EAEvB,6LAAC,qNAAA,CAAA,aAAU;oEAAC,WAAU;;;;;;;;;;;;;;;;;;+CAvBrB,KAAK,EAAE;;;;;;;;;;;;;;;+BAPN,SAAS,EAAE;;;;;;;;;;;;;;;;;;;;;;AA2CzC;KAnFwB","debugId":null}},
    {"offset": {"line": 829, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 867, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 915, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/avatar.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;;AAGb,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAoB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,+BAA+B;QAC5C,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,WAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wEACA;QAED,GAAG,KAAK;;;;;;;AAGb,eAAe,WAAW,GAAG,qKAAA,CAAA,WAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 979, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1194, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1233, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1269, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1421, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/pos/order-summary.tsx"],"sourcesContent":["\nimport { useState } from 'react';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Plus, Minus, Trash2, CreditCard, FilePlus, ShoppingCart, Settings2, Send } from 'lucide-react';\nimport type { OrderItem, Check, OrderType, PriceList } from '@/lib/types';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\n\n\ninterface OrderSummaryProps {\n  activeCheck: Check | undefined;\n  checks: Check[];\n  onUpdateQuantity: (lineItemId: string, quantity: number) => void;\n  onRemoveItem: (lineItemId: string) => void;\n  onNewCheck: () => void;\n  onSendToKitchen: () => void;\n  onCloseCheck: () => void;\n  onClearCheck: () => void;\n  onCustomizeItem: (item: OrderItem) => void;\n  onSwitchCheck: (checkId: string) => void;\n  onUpdateDetails: (updates: Partial<Omit<Check, 'id'>>) => void;\n  priceLists: PriceList[];\n  taxRate: number;\n}\n\nexport default function OrderSummary({\n  activeCheck,\n  checks,\n  onUpdateQuantity,\n  onRemoveItem,\n  onNewCheck,\n  onSendToKitchen,\n  onCloseCheck,\n  onClearCheck,\n  onCustomizeItem,\n  onSwitchCheck,\n  onUpdateDetails,\n  priceLists,\n  taxRate,\n}: OrderSummaryProps) {\n  const [isClearAlertOpen, setClearAlertOpen] = useState(false);\n  const order = activeCheck?.items ?? [];\n  \n  const sentItems = order.filter((item) => item.status === 'sent');\n  const newItems = order.filter((item) => item.status === 'new');\n\n  const subtotal = order.reduce((acc, item) => {\n    const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n    const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n    return acc + totalItemPrice;\n  }, 0);\n  \n  const selectedPriceList = priceLists.find(pl => pl.id === activeCheck?.priceListId);\n  const discountPercentage = selectedPriceList?.discount || 0;\n  const discountAmount = subtotal * (discountPercentage / 100);\n  const discountedSubtotal = subtotal - discountAmount;\n  const tax = discountedSubtotal * (taxRate / 100);\n  const total = discountedSubtotal + tax;\n\n  const hasNewItems = newItems.length > 0;\n  \n  const handleConfirmClear = () => {\n    onClearCheck();\n    setClearAlertOpen(false);\n  };\n\n  if (!activeCheck) {\n    return (\n        <Card className=\"flex flex-col h-full items-center justify-center text-muted-foreground\">\n             <ShoppingCart className=\"w-16 h-16 mb-4\"/>\n             <p className=\"font-semibold\">No active check</p>\n        </Card>\n    )\n  }\n\n  return (\n    <>\n    <Card className=\"flex flex-col h-full\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-2\">\n            <CardTitle className=\"font-headline\">Current Check</CardTitle>\n             {order.length > 0 && (\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-muted-foreground hover:text-destructive\" onClick={() => setClearAlertOpen(true)}>\n                    <Trash2 className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Clear Check</span>\n                </Button>\n            )}\n          </div>\n            {checks.length > 1 && (\n                <Select value={activeCheck.id ?? ''} onValueChange={onSwitchCheck}>\n                    <SelectTrigger className=\"w-[180px] h-9\">\n                        <SelectValue placeholder=\"Select a check\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {checks.map(check => (\n                            <SelectItem key={check.id} value={check.id}>\n                                {check.name} ({check.items.length} items)\n                            </SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n            )}\n        </div>\n        <CardDescription>\n            {`Editing ${activeCheck.name}`}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow flex flex-col min-h-0\">\n        <Tabs \n            value={activeCheck.orderType || \"\"} \n            onValueChange={(value) => onUpdateDetails({ orderType: value as OrderType })}\n            className=\"w-full\"\n        >\n            <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"Dine In\">Dine In</TabsTrigger>\n                <TabsTrigger value=\"Take Away\">Take Away</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"Dine In\" className=\"mt-4\">\n                <Label htmlFor=\"table-number\">Table Number</Label>\n                <Input \n                    id=\"table-number\" \n                    placeholder=\"e.g., 12\" \n                    value={activeCheck.tableNumber || ''}\n                    onChange={(e) => onUpdateDetails({ tableNumber: e.target.value })}\n                />\n            </TabsContent>\n            <TabsContent value=\"Take Away\" className=\"mt-4\">\n                <Label htmlFor=\"customer-name\">Customer Name</Label>\n                <Input \n                    id=\"customer-name\" \n                    placeholder=\"e.g., John Doe\" \n                    value={activeCheck.customerName || ''}\n                    onChange={(e) => onUpdateDetails({ customerName: e.target.value })}\n                />\n            </TabsContent>\n        </Tabs>\n\n        <Separator className=\"my-4\" />\n\n        <div className=\"space-y-1\">\n            <Label>Applied Discount</Label>\n            <div className=\"flex items-center justify-between rounded-md border bg-muted px-3 py-2 text-sm\">\n                <span className=\"font-medium text-muted-foreground\">{selectedPriceList ? selectedPriceList.name : 'Default Pricing'}</span>\n                <span className=\"font-bold text-primary\">{discountPercentage > 0 ? `${discountPercentage}% off` : 'No discount'}</span>\n            </div>\n        </div>\n\n\n        <Separator className=\"my-4\" />\n\n        {order.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground flex-grow\">\n            <ShoppingCart className=\"w-16 h-16 mb-4\"/>\n            <p className=\"font-semibold\">Your check is empty</p>\n            <p className=\"text-sm\">Add items from the menu to get started.</p>\n          </div>\n        ) : (\n          <div className=\"flex flex-col h-full flex-grow min-h-0\">\n            <ScrollArea className=\"flex-grow -mr-6 pr-6\">\n              <div className=\"space-y-4\">\n\n                {sentItems.length > 0 && (\n                    <div>\n                        <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Sent to Kitchen</h4>\n                        <div className=\"space-y-2 text-sm pl-1\">\n                        {sentItems.map(item => (\n                            <div key={item.lineItemId} className=\"flex justify-between items-center text-muted-foreground\">\n                            <div>\n                                <span>{item.quantity} x {item.name}</span>\n                                {item.customizations?.added && item.customizations.added.length > 0 && \n                                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                                    {item.customizations.added.map(a => <Badge key={a.id} variant=\"secondary\" className=\"font-normal capitalize shadow-sm text-xs h-4 px-1.5\">+ {a.name}</Badge>)}\n                                    </div>\n                                }\n                                 {item.customizations?.removed && item.customizations.removed.length > 0 && \n                                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                                    {item.customizations.removed.map(r => <Badge key={r} variant=\"destructive\" className=\"font-normal capitalize shadow-sm text-xs h-4 px-1.5\">- {r}</Badge>)}\n                                    </div>\n                                }\n                            </div>\n                            <span>${(item.price * item.quantity).toFixed(2)}</span>\n                            </div>\n                        ))}\n                        </div>\n                    </div>\n                )}\n                \n                {sentItems.length > 0 && newItems.length > 0 && <Separator />}\n\n                {newItems.length > 0 && (\n                  <div>\n                    {sentItems.length > 0 && <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">New Items</h4>}\n                    <div className=\"space-y-2\">\n                        {newItems.map((item) => (\n                        <div key={item.lineItemId} className=\"flex items-start py-3 border-b last:border-b-0 gap-4\">\n                            <Avatar className=\"w-14 h-14 rounded-md border\">\n                                <AvatarImage src={item.imageUrl} alt={item.name} />\n                                <AvatarFallback>{item.name.charAt(0)}</AvatarFallback>\n                            </Avatar>\n                            <div className=\"flex-grow\">\n                                <div className=\"flex items-start\">\n                                    <div className=\"flex-1 pr-2\">\n                                        <div className=\"flex items-center gap-2\">\n                                            <span title=\"New item\" className=\"h-2 w-2 rounded-full bg-accent\" />\n                                            <p className=\"font-semibold leading-tight\">{item.name}</p>\n                                        </div>\n                                        <p className=\"text-sm text-muted-foreground ml-4\">${item.price.toFixed(2)} each</p>\n                                    </div>\n                                    <div className=\"flex items-center gap-2\">\n                                        <div className=\"flex items-center gap-1\">\n                                        <Button\n                                            variant=\"outline\"\n                                            size=\"icon\"\n                                            className=\"h-8 w-8\"\n                                            onClick={() => onUpdateQuantity(item.lineItemId, item.quantity - 1)}\n                                        >\n                                            <Minus className=\"h-4 w-4\" />\n                                        </Button>\n                                        <span className=\"w-8 text-center font-medium text-base\">{item.quantity}</span>\n                                        <Button\n                                            variant=\"outline\"\n                                            size=\"icon\"\n                                            className=\"h-8 w-8\"\n                                            onClick={() => onUpdateQuantity(item.lineItemId, item.quantity + 1)}\n                                        >\n                                            <Plus className=\"h-4 w-4\" />\n                                        </Button>\n                                        </div>\n                                        <p className=\"w-20 text-right font-semibold text-base\">\n                                        ${(item.price * item.quantity).toFixed(2)}\n                                        </p>\n                                        <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        className=\"h-8 w-8 text-muted-foreground hover:text-destructive\"\n                                        onClick={() => onRemoveItem(item.lineItemId)}\n                                        >\n                                        <Trash2 className=\"h-4 w-4\" />\n                                        </Button>\n                                    </div>\n                                </div>\n                                \n                                {( (item.customizations?.added?.length || 0) > 0 || (item.customizations?.removed?.length || 0) > 0 || (item.ingredients && item.ingredients.length > 0) ) && (\n                                <div className=\"mt-2 flex items-center gap-4 flex-wrap\">\n                                    <div className=\"flex-grow flex flex-wrap gap-1\">\n                                    {item.customizations?.removed?.map(r => (\n                                        <Badge key={r} variant=\"destructive\" className=\"font-normal capitalize shadow-sm\">\n                                            - {r}\n                                        </Badge>\n                                    ))}\n                                    {item.customizations?.added?.map(a => (\n                                        <Badge key={a.id} variant=\"secondary\" className=\"font-normal capitalize shadow-sm\">\n                                            + {a.name}{a.price > 0 ? ` (+$${a.price.toFixed(2)})` : ''}\n                                        </Badge>\n                                    ))}\n                                    </div>\n                                    {item.ingredients && item.ingredients.length > 0 && (\n                                    <div className=\"flex-shrink-0\">\n                                        <Button variant=\"link\" size=\"sm\" className=\"h-auto p-0 text-muted-foreground hover:text-primary\" onClick={() => onCustomizeItem(item)}>\n                                        <Settings2 className=\"h-3 w-3 mr-1.5\"/>\n                                        Customize\n                                        </Button>\n                                    </div>\n                                    )}\n                                </div>\n                                )}\n                            </div>\n                        </div>\n                        ))}\n                    </div>\n                  </div>\n                )}\n                 {newItems.length === 0 && sentItems.length > 0 && (\n                    <div className=\"text-center text-muted-foreground py-6\">\n                        <p className=\"font-medium\">No new items to send.</p>\n                        <p className=\"text-xs\">Add more items from the menu.</p>\n                    </div>\n                )}\n              </div>\n            </ScrollArea>\n            <div className=\"mt-auto pt-4 border-t\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal</span>\n                  <span>${subtotal.toFixed(2)}</span>\n                </div>\n                 {discountAmount > 0 && (\n                    <div className=\"flex justify-between text-green-600 dark:text-green-400\">\n                        <span>Discount ({discountPercentage}%)</span>\n                        <span>-${discountAmount.toFixed(2)}</span>\n                    </div>\n                )}\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>Tax ({taxRate.toFixed(1)}%)</span>\n                  <span>${tax.toFixed(2)}</span>\n                </div>\n                <Separator className=\"my-2\"/>\n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span>Total</span>\n                  <span>${total.toFixed(2)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex flex-col gap-2 pt-6 border-t\">\n        {activeCheck.orderType === 'Dine In' && (\n            <>\n                <Button className=\"w-full\" size=\"lg\" onClick={onSendToKitchen} disabled={!hasNewItems}>\n                    <Send className=\"mr-2 h-4 w-4\" /> Send to Kitchen\n                </Button>\n                <Button className=\"w-full\" variant=\"outline\" onClick={onCloseCheck} disabled={order.length === 0 || hasNewItems}>\n                    <CreditCard className=\"mr-2 h-4 w-4\" /> Close & Pay Bill\n                </Button>\n            </>\n        )}\n        {activeCheck.orderType === 'Take Away' && (\n             <Button className=\"w-full\" size=\"lg\" onClick={onSendToKitchen} disabled={order.length === 0}>\n                <CreditCard className=\"mr-2 h-4 w-4\" /> Finalize & Pay\n            </Button>\n        )}\n        {!activeCheck.orderType && (\n            <Button className=\"w-full\" size=\"lg\" disabled>\n                Select an Order Type\n            </Button>\n        )}\n        <Button variant=\"outline\" className=\"w-full\" onClick={onNewCheck}>\n          <FilePlus className=\"mr-2 h-4 w-4\" /> New Check\n        </Button>\n      </CardFooter>\n    </Card>\n    \n    <AlertDialog open={isClearAlertOpen} onOpenChange={setClearAlertOpen}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>Clear all items from the check?</AlertDialogTitle>\n                <AlertDialogDescription>This action cannot be undone. All items will be removed from the current check.</AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleConfirmClear}>Yes, Clear Check</AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n    </AlertDialog>\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2569, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/members/members-list.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport Link from \"next/link\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport type { Member } from \"@/lib/types\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n\nexport default function MembersList({ members }: { members: Member[] }) {\n    return (\n        <Card className=\"h-full flex flex-col\">\n            <ScrollArea className=\"h-full\">\n                <CardContent className=\"p-4 md:p-6\">\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 md:gap-6\">\n                        {members.map((member) => (\n                            <Link href={`/members/${member.id}`} key={member.id} className=\"block\">\n                                <Card className=\"h-full text-center transition-all hover:shadow-lg hover:border-primary cursor-pointer border-2 border-transparent\">\n                                    <CardContent className=\"flex flex-col items-center justify-center p-4 gap-3\">\n                                        <Avatar className=\"w-24 h-24 border-2 border-muted\">\n                                            <AvatarImage src={member.avatarUrl} alt={member.name} data-ai-hint={member.avatarHint} />\n                                            <AvatarFallback className=\"text-3xl\">{member.name.charAt(0)}</AvatarFallback>\n                                        </Avatar>\n                                        <div className=\"flex-grow\">\n                                            <p className=\"font-semibold font-headline text-lg\">{member.name}</p>\n                                            <p className=\"text-xs text-muted-foreground\">{member.email}</p>\n                                        </div>\n                                    </CardContent>\n                                </Card>\n                            </Link>\n                        ))}\n                    </div>\n                </CardContent>\n            </ScrollArea>\n        </Card>\n    )\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AAEA;AAPA;;;;;;AASe,SAAS,YAAY,EAAE,OAAO,EAAyB;IAClE,qBACI,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;kBACZ,cAAA,6LAAC,6IAAA,CAAA,aAAU;YAAC,WAAU;sBAClB,cAAA,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACnB,cAAA,6LAAC;oBAAI,WAAU;8BACV,QAAQ,GAAG,CAAC,CAAC,uBACV,6LAAC,+JAAA,CAAA,UAAI;4BAAC,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE;4BAAkB,WAAU;sCAC3D,cAAA,6LAAC,mIAAA,CAAA,OAAI;gCAAC,WAAU;0CACZ,cAAA,6LAAC,mIAAA,CAAA,cAAW;oCAAC,WAAU;;sDACnB,6LAAC,qIAAA,CAAA,SAAM;4CAAC,WAAU;;8DACd,6LAAC,qIAAA,CAAA,cAAW;oDAAC,KAAK,OAAO,SAAS;oDAAE,KAAK,OAAO,IAAI;oDAAE,gBAAc,OAAO,UAAU;;;;;;8DACrF,6LAAC,qIAAA,CAAA,iBAAc;oDAAC,WAAU;8DAAY,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;;;;;;sDAE7D,6LAAC;4CAAI,WAAU;;8DACX,6LAAC;oDAAE,WAAU;8DAAuC,OAAO,IAAI;;;;;;8DAC/D,6LAAC;oDAAE,WAAU;8DAAiC,OAAO,KAAK;;;;;;;;;;;;;;;;;;;;;;;2BAThC,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;AAoB/E;KA3BwB","debugId":null}},
    {"offset": {"line": 2700, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2746, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/pos/order-progress.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { X, CheckCircle, Package, Soup, ClipboardList, UtensilsCrossed, ShoppingBag } from 'lucide-react';\nimport type { ActiveOrder, OrderStatus } from '@/lib/types';\nimport { format, formatDistanceToNowStrict } from 'date-fns';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface OrderProgressProps {\n  orders: ActiveOrder[];\n  onCompleteOrder: (orderId: string) => void;\n  onClearOrder: (orderId: string) => void;\n}\n\nconst statusConfig: Record<OrderStatus, { icon: React.ElementType; label: string; badgeVariant: \"default\" | \"secondary\" | \"outline\" | \"destructive\" }> = {\n    Preparing: { icon: Soup, label: \"Preparing\", badgeVariant: \"secondary\" },\n    Ready: { icon: Package, label: \"Ready\", badgeVariant: \"outline\" },\n    Completed: { icon: CheckCircle, label: \"Completed\", badgeVariant: \"default\" },\n};\n\nfunction OrderCard({ order, onCompleteOrder, onClearOrder }: { order: ActiveOrder, onCompleteOrder: (id: string) => void, onClearOrder: (id: string) => void }) {\n    const [currentTime, setCurrentTime] = useState(new Date());\n\n    useEffect(() => {\n        const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n        return () => clearInterval(timer);\n    }, []);\n\n    const startTime = new Date(order.createdAt).getTime();\n    const totalDuration = order.totalPreparationTime * 60 * 1000; // in milliseconds\n    const endTime = startTime + totalDuration;\n    const elapsedTime = currentTime.getTime() - startTime;\n\n    let currentStatus: OrderStatus;\n    let progress = 0;\n    \n    if (order.status === 'Completed') {\n        currentStatus = 'Completed';\n        progress = 100;\n    } else {\n        progress = Math.min(100, (elapsedTime / totalDuration) * 100);\n        if (progress >= 100) {\n            currentStatus = 'Ready';\n        } else {\n            currentStatus = 'Preparing';\n        }\n    }\n\n    const config = statusConfig[currentStatus];\n    const timeLeft = endTime - currentTime.getTime();\n\n    return (\n        <div className=\"p-4 border rounded-lg space-y-3 transition-all bg-card/50\">\n            <div className=\"flex justify-between items-start\">\n                <div>\n                    <div className=\"flex items-center gap-2\">\n                        {order.orderType === 'Dine In' && <UtensilsCrossed className=\"h-4 w-4 text-muted-foreground\" />}\n                        {order.orderType === 'Take Away' && <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />}\n                        <p className=\"font-semibold\">{order.checkName} - #{order.id.slice(-6)}</p>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground pl-6\">\n                        {order.orderType === 'Dine In' && `Table ${order.tableNumber || 'N/A'}`}\n                        {order.orderType === 'Take Away' && `For ${order.customerName || 'N/A'}`}\n                        {order.orderType === 'Delivery' && `For ${order.customerName || 'N/A'}`}\n                        {' · '}\n                        Total: ${order.total.toFixed(2)}\n                        {order.discountApplied && order.discountApplied > 0 && (\n                            <span className=\"text-green-600 dark:text-green-400 font-medium\"> ({order.discountApplied}% off)</span>\n                        )}\n                    </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <Badge variant={config.badgeVariant} className={currentStatus === 'Completed' ? 'bg-green-600 text-white border-transparent hover:bg-green-700' : ''}>\n                        <config.icon className=\"h-3 w-3 mr-1.5\" />\n                        {config.label}\n                    </Badge>\n                     {currentStatus === 'Ready' && (\n                        <Button size=\"sm\" onClick={() => onCompleteOrder(order.id)}>\n                            <CheckCircle className=\"h-4 w-4 mr-2\" /> Mark Completed\n                        </Button>\n                    )}\n                    {currentStatus === 'Completed' && (\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\" onClick={() => onClearOrder(order.id)}>\n                            <X className=\"h-4 w-4\"/>\n                            <span className=\"sr-only\">Clear Order</span>\n                        </Button>\n                    )}\n                </div>\n            </div>\n            <div>\n                 <Progress value={progress} className=\"h-2\" />\n                 <p className=\"text-xs text-muted-foreground mt-1.5 text-right\">\n                    {currentStatus === 'Preparing' && timeLeft > 0 && `Ready in approx. ${formatDistanceToNowStrict(endTime)}`}\n                    {currentStatus === 'Ready' && 'Ready for pickup!'}\n                    {currentStatus === 'Completed' && 'Order collected.'}\n                 </p>\n            </div>\n        </div>\n    );\n}\n\nexport default function OrderProgress({ orders, onCompleteOrder, onClearOrder }: OrderProgressProps) {\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader>\n        <CardTitle className=\"font-headline\">Order Progress</CardTitle>\n        <CardDescription>Track active and recently completed orders in real-time.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow flex flex-col min-h-0\">\n        {orders.length === 0 ? (\n            <div className=\"text-center text-muted-foreground flex-grow flex flex-col justify-center items-center\">\n                <ClipboardList className=\"w-16 h-16 mb-4\"/>\n                <p className=\"font-semibold\">No active orders</p>\n                <p className=\"text-sm\">Place a new order to see its progress here.</p>\n            </div>\n        ) : (\n        <ScrollArea className=\"h-full w-full pr-4\">\n            <div className=\"space-y-4\">\n                {orders.map((order) => (\n                    <OrderCard key={order.id} order={order} onCompleteOrder={onCompleteOrder} onClearOrder={onClearOrder} />\n                ))}\n            </div>\n        </ScrollArea>\n      )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3123, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,qKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,qKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,qKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,qKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,qKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,qKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,+LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,qKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,kBAAkB,WAAW,GAAG,qKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3274, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,6LAAC,uMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3326, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/pos/customize-item-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport type { OrderItem, Extra } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\n\ninterface CustomizeItemDialogProps {\n  item: OrderItem | null;\n  availableExtras: Extra[];\n  onSave: (lineItemId: string, customizations: { added: Extra[], removed: string[] }) => void;\n  onClose: () => void;\n}\n\nexport default function CustomizeItemDialog({ item, availableExtras, onSave, onClose }: CustomizeItemDialogProps) {\n  const [removed, setRemoved] = useState<string[]>([]);\n  const [added, setAdded] = useState<Extra[]>([]);\n  \n  const optionalIngredients = item?.ingredients?.filter(i => i.isOptional) ?? [];\n\n  useEffect(() => {\n    if (item) {\n      setRemoved(item.customizations?.removed || []);\n      setAdded(item.customizations?.added || []);\n    } else {\n        setRemoved([]);\n        setAdded([]);\n    }\n  }, [item]);\n\n  if (!item) return null;\n\n  const handleIngredientToggle = (ingredientName: string) => {\n    setRemoved(prev => \n        prev.includes(ingredientName) \n        ? prev.filter(i => i !== ingredientName) \n        : [...prev, ingredientName]\n    );\n  };\n  \n  const handleExtraToggle = (extra: Extra) => {\n    setAdded(prev => \n        prev.some(e => e.id === extra.id)\n        ? prev.filter(e => e.id !== extra.id)\n        : [...prev, extra]\n    );\n  };\n\n  const handleSave = () => {\n    onSave(item.lineItemId, { added, removed });\n  };\n\n  return (\n    <Dialog open={!!item} onOpenChange={(isOpen) => !isOpen && onClose()}>\n      <DialogContent className=\"sm:max-w-[480px]\">\n        <DialogHeader>\n          <DialogTitle className=\"font-headline\">Customize: {item.name}</DialogTitle>\n          <DialogDescription>Add or remove ingredients to make it just right.</DialogDescription>\n        </DialogHeader>\n        <div className=\"py-4 space-y-6 max-h-[60vh] overflow-y-auto pr-4\">\n            {optionalIngredients.length > 0 && (\n                <div className=\"space-y-3\">\n                    <h4 className=\"font-semibold\">Optional Ingredients</h4>\n                    <div className=\"grid grid-cols-2 gap-x-4 gap-y-2\">\n                        {optionalIngredients.map(ingredient => (\n                            <div key={ingredient.id} className=\"flex items-center space-x-2\">\n                                <Checkbox \n                                    id={`ingredient-${ingredient.id}`} \n                                    checked={!removed.includes(ingredient.name)}\n                                    onCheckedChange={() => handleIngredientToggle(ingredient.name)}\n                                />\n                                <Label htmlFor={`ingredient-${ingredient.id}`} className=\"capitalize cursor-pointer\">{ingredient.name}</Label>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n             {optionalIngredients.length > 0 && <Separator />}\n            <div className=\"space-y-3\">\n                <h4 className=\"font-semibold\">Add Extras</h4>\n                 <div className=\"grid grid-cols-2 gap-x-4 gap-y-2\">\n                    {availableExtras.map(extra => (\n                       <div key={extra.id} className=\"flex items-center space-x-2\">\n                            <Checkbox \n                                id={`extra-${extra.id}`} \n                                checked={added.some(e => e.id === extra.id)}\n                                onCheckedChange={() => handleExtraToggle(extra)}\n                            />\n                            <Label htmlFor={`extra-${extra.id}`} className=\"cursor-pointer\">\n                                {extra.name}\n                                {extra.price > 0 && (\n                                    <span className=\"text-muted-foreground ml-1.5\">\n                                        (+${extra.price.toFixed(2)})\n                                    </span>\n                                )}\n                            </Label>\n                       </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n        <DialogFooter>\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>Cancel</Button>\n          <Button type=\"button\" onClick={handleSave}>Save Changes</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3596, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/pos/open-checks-display.tsx"],"sourcesContent":["\n'use client';\n\nimport type { Check, PriceList } from '@/lib/types';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { cn } from '@/lib/utils';\nimport { Package, Users, Utensils, Hash, ShoppingBag } from 'lucide-react';\n\ninterface OpenChecksDisplayProps {\n  checks: Check[];\n  activeCheckId: string | null;\n  onSelectCheck: (checkId: string) => void;\n  priceLists: PriceList[];\n  taxRate: number;\n}\n\nfunction calculateTotal(check: Check, priceLists: PriceList[], taxRate: number) {\n    if (!check) return { total: 0 };\n    \n    const subtotal = check.items.reduce((acc, item) => {\n        const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n        const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n        return acc + totalItemPrice;\n    }, 0);\n    \n    const selectedPriceList = priceLists.find(pl => pl.id === check.priceListId);\n    const discountPercentage = selectedPriceList?.discount || 0;\n    const discountAmount = subtotal * (discountPercentage / 100);\n    const discountedSubtotal = subtotal - discountAmount;\n    const tax = discountedSubtotal * (taxRate / 100);\n    const total = discountedSubtotal + tax;\n\n    return { total };\n}\n\n\nexport default function OpenChecksDisplay({ checks, activeCheckId, onSelectCheck, priceLists, taxRate }: OpenChecksDisplayProps) {\n  if (checks.length === 0) {\n    return (\n        <Card className=\"h-full flex flex-col items-center justify-center\">\n            <div className=\"text-center text-muted-foreground flex-grow flex flex-col justify-center items-center h-full\">\n                <Package className=\"w-16 h-16 mb-4\" />\n                <p className=\"font-semibold text-lg\">No Open Checks</p>\n                <p className=\"text-sm\">Create a new check in the Point of Sale tab.</p>\n            </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n        <CardHeader>\n            <CardTitle className=\"font-headline\">Open Checks</CardTitle>\n            <CardDescription>Select a check to view or add items.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex-grow min-h-0\">\n            <ScrollArea className=\"h-full pr-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n                {checks.map((check) => {\n                    const isActive = check.id === activeCheckId;\n                    const { total } = calculateTotal(check, priceLists, taxRate);\n\n                    return (\n                        <Card\n                            key={check.id}\n                            onClick={() => onSelectCheck(check.id)}\n                            className={cn(\n                                'cursor-pointer transition-all hover:shadow-lg',\n                                isActive ? 'border-primary ring-2 ring-primary shadow-lg' : 'hover:border-primary/50'\n                            )}\n                        >\n                            <CardHeader className=\"pb-2\">\n                                <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                                    {check.orderType === 'Dine In' ? <Utensils className=\"h-5 w-5 text-muted-foreground\" /> : <ShoppingBag className=\"h-5 w-5 text-muted-foreground\" />}\n                                    {check.name}\n                                </CardTitle>\n                            </CardHeader>\n                            <CardContent className=\"text-sm text-muted-foreground space-y-1\">\n                               {check.orderType === 'Dine In' && check.tableNumber && (\n                                   <div className=\"flex items-center gap-2\">\n                                       <Hash className=\"h-4 w-4\" />\n                                       <span>Table {check.tableNumber}</span>\n                                   </div>\n                               )}\n                               {check.orderType === 'Take Away' && check.customerName && (\n                                     <div className=\"flex items-center gap-2\">\n                                       <Users className=\"h-4 w-4\" />\n                                       <span>{check.customerName}</span>\n                                   </div>\n                               )}\n                                <div>\n                                    <span>{check.items.length} item{check.items.length !== 1 ? 's' : ''}</span>\n                                </div>\n                            </CardContent>\n                            <CardFooter>\n                                <p className=\"text-lg font-bold text-primary w-full text-right\">${total.toFixed(2)}</p>\n                            </CardFooter>\n                        </Card>\n                    );\n                })}\n            </div>\n            </ScrollArea>\n        </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3877, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/theme-toggle.tsx"],"sourcesContent":["\"use client\"\n\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const { toggleTheme } = useTheme();\n\n  return (\n    <Button variant=\"ghost\" size=\"icon\" onClick={toggleTheme} aria-label=\"Toggle theme\">\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;;;AAJA;;;;AAMO,SAAS;;IACd,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,0IAAA,CAAA,WAAQ,AAAD;IAE/B,qBACE,6LAAC,qIAAA,CAAA,SAAM;QAAC,SAAQ;QAAQ,MAAK;QAAO,SAAS;QAAa,cAAW;;0BACnE,6LAAC,mMAAA,CAAA,MAAG;gBAAC,WAAU;;;;;;0BACf,6LAAC,qMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;0BAChB,6LAAC;gBAAK,WAAU;0BAAU;;;;;;;;;;;;AAGhC;GAVgB;;QACU,0IAAA,CAAA,WAAQ;;;KADlB","debugId":null}},
    {"offset": {"line": 3946, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/itb-icon.tsx"],"sourcesContent":["import React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport default function ItbIcon({ className }: { className?: string }) {\n  return (\n    <svg\n      viewBox=\"0 0 52 52\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"h-8 w-8\", className)}\n      aria-hidden=\"true\"\n    >\n      <path d=\"M4 12V8C4 5.79086 5.79086 4 8 4H12\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M4 40V44C4 46.2091 5.79086 48 8 48H12\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M40 4H44C46.2091 4 48 5.79086 48 8V12\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M48 40V44C48 46.2091 46.2091 48 44 48H40\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M26 4V4\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M26 48V48\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M4 26H4\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <path d=\"M48 26H48\" stroke=\"hsl(var(--primary))\" strokeWidth=\"4\" strokeLinecap=\"round\" />\n      <text x=\"50%\" y=\"55%\" dominantBaseline=\"middle\" textAnchor=\"middle\" fontFamily=\"Poppins, sans-serif\" fontSize=\"20\" fontWeight=\"bold\" fill=\"hsl(var(--accent))\">\n        ITB\n      </text>\n    </svg>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;;;AAEe,SAAS,QAAQ,EAAE,SAAS,EAA0B;IACnE,qBACE,6LAAC;QACC,SAAQ;QACR,MAAK;QACL,OAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,WAAW;QACzB,eAAY;;0BAEZ,6LAAC;gBAAK,GAAE;gBAAqC,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BACxG,6LAAC;gBAAK,GAAE;gBAAwC,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC3G,6LAAC;gBAAK,GAAE;gBAAwC,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC3G,6LAAC;gBAAK,GAAE;gBAA2C,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC9G,6LAAC;gBAAK,GAAE;gBAAU,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC7E,6LAAC;gBAAK,GAAE;gBAAY,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC/E,6LAAC;gBAAK,GAAE;gBAAU,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC7E,6LAAC;gBAAK,GAAE;gBAAY,QAAO;gBAAsB,aAAY;gBAAI,eAAc;;;;;;0BAC/E,6LAAC;gBAAK,GAAE;gBAAM,GAAE;gBAAM,kBAAiB;gBAAS,YAAW;gBAAS,YAAW;gBAAsB,UAAS;gBAAK,YAAW;gBAAO,MAAK;0BAAqB;;;;;;;;;;;;AAKrK;KAtBwB","debugId":null}},
    {"offset": {"line": 4075, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport { useState, useEffect, useMemo } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { getCategories, getMenuItems } from '@/app/admin/menu/actions';\nimport { getExtras } from '@/app/admin/extras/actions';\nimport { getUsers } from '@/app/admin/users/actions';\nimport { getSettings } from '@/app/admin/settings/actions';\nimport { getChecks, addCheck, updateCheck, deleteCheck, getOrders, addOrder, deleteOrder, updateOrderStatus, sendNewItemsToKitchen } from '@/app/pos/actions';\nimport type { OrderItem, MenuItem, ActiveOrder, Check, Member, Category, OrderType, Extra, PriceList } from '@/lib/types';\nimport MenuDisplay from '@/components/pos/menu-display';\nimport OrderSummary from '@/components/pos/order-summary';\nimport MembersList from '@/components/members/members-list';\nimport OrderProgress from '@/components/pos/order-progress';\nimport CustomizeItemDialog from '@/components/pos/customize-item-dialog';\nimport OpenChecksDisplay from '@/components/pos/open-checks-display';\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LayoutDashboard, Users, Loader2, ClipboardList, LogOut, Settings, ClipboardCheck } from 'lucide-react';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport { Button } from '@/components/ui/button';\nimport ItbIcon from '@/components/itb-icon';\n\nexport default function Home() {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeOrders, setActiveOrders] = useState<ActiveOrder[]>([]);\n  const { toast } = useToast()\n  const [isCloseCheckAlertOpen, setCloseCheckAlertOpen] = useState(false);\n  const [customizingItem, setCustomizingItem] = useState<OrderItem | null>(null);\n\n  const [checks, setChecks] = useState<Check[]>([]);\n  const [activeCheckId, setActiveCheckId] = useState<string | null>(null);\n  const [members, setMembers] = useState<Member[]>([]);\n  \n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [availableExtras, setAvailableExtras] = useState<Extra[]>([]);\n  const [settings, setSettings] = useState<{ taxRate: number; priceLists: PriceList[]; activePriceListId?: string; } | null>(null);\n\n  const [activeTab, setActiveTab] = useState(\"pos\");\n\n  const activeCheck = useMemo(() => checks.find(c => c.id === activeCheckId), [checks, activeCheckId]);\n  \n  useEffect(() => {\n    const isLoggedIn = typeof window !== 'undefined' ? localStorage.getItem('isLoggedIn') : null;\n    if (isLoggedIn !== 'true') {\n      router.replace('/login');\n    } else {\n      const fetchInitialData = async () => {\n        setIsLoading(true);\n        const [\n          fetchedMembers, \n          fetchedMenuItems, \n          fetchedCategories, \n          fetchedChecks, \n          fetchedOrders,\n          fetchedExtras,\n          fetchedSettings,\n        ] = await Promise.all([\n            getUsers(),\n            getMenuItems(),\n            getCategories(),\n            getChecks(),\n            getOrders(),\n            getExtras(),\n            getSettings(),\n        ]);\n        setMembers(fetchedMembers);\n        setMenuItems(fetchedMenuItems);\n        setCategories(fetchedCategories);\n        setChecks(fetchedChecks);\n        setActiveOrders(fetchedOrders);\n        setAvailableExtras(fetchedExtras);\n        setSettings(fetchedSettings);\n        \n        if (fetchedChecks.length === 0) {\n            const newCheckData: Omit<Check, 'id'> = { \n              name: 'Check 1', \n              items: [],\n              priceListId: fetchedSettings.activePriceListId,\n            };\n            const newCheck = await addCheck(newCheckData);\n            setChecks([newCheck]);\n            setActiveCheckId(newCheck.id);\n        } else {\n            setActiveCheckId(fetchedChecks[0].id);\n        }\n\n        setIsLoading(false);\n      }\n      fetchInitialData();\n    }\n  }, [router]);\n\n  const updateActiveCheck = async (updates: Partial<Omit<Check, 'id'>>) => {\n    if (!activeCheckId) return;\n    \n    // Optimistically update the UI\n    setChecks(prevChecks => \n      prevChecks.map(c => \n        c.id === activeCheckId ? { ...c, ...updates } : c\n      )\n    );\n    \n    await updateCheck(activeCheckId, updates);\n  };\n\n\n  const handleAddItem = (item: MenuItem) => {\n    const order = activeCheck?.items ?? [];\n    let newItems: OrderItem[];\n    const existingNewItem = order.find(\n      (orderItem) => orderItem.id === item.id && !orderItem.customizations && orderItem.status === 'new'\n    );\n\n    if (existingNewItem) {\n      newItems = order.map((orderItem) =>\n        orderItem.lineItemId === existingNewItem.lineItemId\n          ? { ...orderItem, quantity: orderItem.quantity + 1 }\n          : orderItem\n      );\n    } else {\n      const newOrderItem: OrderItem = { ...item, quantity: 1, lineItemId: `${item.id}-${Date.now()}`, status: 'new' };\n      newItems = [...order, newOrderItem];\n    }\n\n    updateActiveCheck({ items: newItems });\n  };\n\n  const handleUpdateQuantity = (lineItemId: string, quantity: number) => {\n    if (quantity < 1) {\n      handleRemoveItem(lineItemId);\n      return;\n    }\n    const newItems = (activeCheck?.items ?? []).map((item) => (item.lineItemId === lineItemId ? { ...item, quantity, status: 'new' } : item))\n    updateActiveCheck({ items: newItems });\n  };\n\n  const handleRemoveItem = (lineItemId: string) => {\n    const newItems = (activeCheck?.items ?? []).filter((item) => item.lineItemId !== lineItemId);\n    updateActiveCheck({ items: newItems });\n  };\n  \n  const handleClearCheck = () => {\n    updateActiveCheck({ items: [] });\n  };\n  \n  const handleStartCustomization = (itemToCustomize: OrderItem) => {\n    const order = activeCheck?.items ?? [];\n    if (itemToCustomize.quantity > 1) {\n      const otherItems = order.filter(i => i.lineItemId !== itemToCustomize.lineItemId);\n      const originalItem = { ...itemToCustomize, quantity: itemToCustomize.quantity - 1 };\n      const newItemToCustomize = { ...itemToCustomize, quantity: 1, lineItemId: `${itemToCustomize.id}-${Date.now()}`, status: 'new' as const };\n      setCustomizingItem(newItemToCustomize);\n      updateActiveCheck({ items: [...otherItems, originalItem, newItemToCustomize] });\n    } else {\n      setCustomizingItem(itemToCustomize);\n    }\n  };\n\n  const handleUpdateCustomization = (\n    lineItemId: string, \n    customizations: { added: Extra[], removed: string[] }\n  ) => {\n    const newItems = (activeCheck?.items ?? []).map(item => \n        item.lineItemId === lineItemId ? { ...item, customizations, status: 'new' as const } : item\n      );\n    updateActiveCheck({ items: newItems });\n    setCustomizingItem(null);\n  };\n\n  const handleNewCheck = async () => {\n    const newCheckName = `Check ${checks.length + 1}`;\n    const newCheckData: Omit<Check, 'id'> = { \n      name: newCheckName, \n      items: [],\n      priceListId: settings?.activePriceListId,\n    };\n    const newCheck = await addCheck(newCheckData);\n    \n    setChecks(prevChecks => [...prevChecks, newCheck]);\n    setActiveCheckId(newCheck.id);\n\n    toast({\n        title: \"New Check Started\",\n        description: `Switched to ${newCheck.name}.`,\n    });\n  };\n\n  const handleSwitchCheck = (checkId: string) => {\n    setActiveCheckId(checkId);\n  }\n\n  const handleSelectCheckAndSwitchTab = (checkId: string) => {\n    setActiveCheckId(checkId);\n    setActiveTab(\"pos\");\n  };\n\n  const handleSendToKitchen = async () => {\n    if (!activeCheckId || !activeCheck) return;\n\n    if (activeCheck.orderType === 'Take Away') {\n      await handleFinalizeAndPay();\n      return;\n    }\n\n    // This logic is now only for \"Dine In\" orders\n    const originalCheckId = activeCheckId;\n    const originalCheckName = activeCheck.name;\n\n    const result = await sendNewItemsToKitchen(originalCheckId);\n\n    if (result.success) {\n      toast({\n        title: \"Items Sent!\",\n        description: `New items for ${originalCheckName} sent to the kitchen.`,\n      });\n\n      // After sending, immediately create a new check.\n      const newCheckName = `Check ${checks.length + 1}`;\n      const newCheckData: Omit<Check, 'id'> = {\n        name: newCheckName,\n        items: [],\n        priceListId: settings?.activePriceListId,\n      };\n      const newCheck = await addCheck(newCheckData);\n\n      // Fetch the updated list of checks and orders\n      const [updatedChecks, newOrders] = await Promise.all([\n        getChecks(),\n        getOrders()\n      ]);\n      \n      setChecks(updatedChecks);\n      setActiveOrders(newOrders);\n      setActiveCheckId(newCheck.id); // Set the new, empty check as active.\n\n      toast({\n        title: \"New Check Started\",\n        description: `The previous check is available in 'Open Checks'.`,\n      });\n\n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.error || 'Could not send items to kitchen.',\n      });\n      const updatedChecks = await getChecks();\n      setChecks(updatedChecks);\n    }\n  };\n\n  const handleFinalizeAndPay = async () => {\n    if (!activeCheck || !activeCheckId || activeCheck.items.length === 0 || !activeCheck.orderType || !settings) return;\n\n    // For Dine In, we just close the check. The individual orders are already tracked.\n    if (activeCheck.orderType === 'Dine In') {\n      await deleteCheck(activeCheckId);\n      \n      const remainingChecks = checks.filter(c => c.id !== activeCheckId);\n      setChecks(remainingChecks);\n\n      if (remainingChecks.length > 0) {\n          setActiveCheckId(remainingChecks[0].id);\n      } else {\n          const newCheckData: Omit<Check, 'id'> = { \n            name: 'Check 1', \n            items: [],\n            priceListId: settings.activePriceListId,\n          };\n          const newCheck = await addCheck(newCheckData);\n          setChecks([newCheck]);\n          setActiveCheckId(newCheck.id);\n      }\n\n      toast({\n          title: \"Bill Closed\",\n          description: `${activeCheck.name} has been paid and closed.`,\n      });\n      setCloseCheckAlertOpen(false);\n      return;\n    }\n\n    // This logic is for Take Away / Delivery where the entire check becomes one order.\n    const subtotal = activeCheck.items.reduce((acc, item) => {\n      const extrasPrice = item.customizations?.added.reduce((extraAcc, extra) => extraAcc + extra.price, 0) || 0;\n      const totalItemPrice = (item.price + extrasPrice) * item.quantity;\n      return acc + totalItemPrice;\n    }, 0);\n\n    const selectedPriceList = settings.priceLists.find(pl => pl.id === activeCheck.priceListId);\n    const discountPercentage = selectedPriceList?.discount || 0;\n    const discountAmount = subtotal * (discountPercentage / 100);\n    const discountedSubtotal = subtotal - discountAmount;\n    const tax = discountedSubtotal * (settings.taxRate / 100);\n    const total = discountedSubtotal + tax;\n    \n    const totalPreparationTime = activeCheck.items.reduce((acc, item) => acc + (item.preparationTime || 5) * item.quantity, 0);\n\n    const newOrderData: Omit<ActiveOrder, 'id' | 'createdAt'> & { createdAt: Date } = {\n      items: [...activeCheck.items],\n      status: 'Preparing',\n      total: total,\n      createdAt: new Date(),\n      checkName: activeCheck.name,\n      totalPreparationTime,\n      orderType: activeCheck.orderType,\n      tableNumber: activeCheck.tableNumber,\n      customerName: activeCheck.customerName,\n      priceListId: activeCheck.priceListId,\n      discountApplied: discountPercentage,\n    };\n\n    await addOrder(newOrderData);\n    await deleteCheck(activeCheckId);\n    \n    // Refetch orders and update checks state\n    const newOrders = await getOrders();\n    setActiveOrders(newOrders);\n    \n    const remainingChecks = checks.filter(c => c.id !== activeCheckId);\n    setChecks(remainingChecks);\n\n    if (remainingChecks.length > 0) {\n        setActiveCheckId(remainingChecks[0].id);\n    } else {\n        const newCheckData: Omit<Check, 'id'> = { \n          name: 'Check 1', \n          items: [],\n          priceListId: settings.activePriceListId,\n        };\n        const newCheck = await addCheck(newCheckData);\n        setChecks([newCheck]);\n        setActiveCheckId(newCheck.id);\n    }\n\n    toast({\n        title: \"Order Sent & Closed!\",\n        description: `${activeCheck.name} sent and check is closed.`,\n    });\n    setCloseCheckAlertOpen(false);\n  }\n\n  const handleCloseCheck = () => {\n    if (!activeCheck?.orderType) {\n        toast({\n            variant: \"destructive\",\n            title: \"Order Type Required\",\n            description: \"Please select Dine In or Take Away before closing the check.\",\n        });\n        return;\n    }\n     setCloseCheckAlertOpen(true);\n  }\n\n  const handleCompleteOrder = async (orderId: string) => {\n    await updateOrderStatus(orderId, 'Completed');\n    setActiveOrders(prev => prev.map(o => o.id === orderId ? {...o, status: 'Completed'} : o));\n    toast({\n        title: \"Order Completed\",\n        description: \"The order has been marked as complete.\",\n    });\n  }\n\n  const handleClearOrder = async (orderId: string) => {\n    await deleteOrder(orderId);\n    setActiveOrders(prev => prev.filter(o => o.id !== orderId));\n  }\n\n\n  const handleLogout = () => {\n    localStorage.removeItem('isLoggedIn');\n    router.push('/login');\n  };\n\n  if (isLoading || !settings) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-16 w-16 animate-spin text-primary\" />\n      </div>\n    );\n  }\n  \n  const closeCheckAlertDescription = activeCheck?.orderType === 'Dine In'\n      ? \"This will close the bill for this table. This assumes the customer has paid. Are you sure?\"\n      : \"This will finalize the entire check, send it as one order, and close it. This action is for final payment. Are you sure?\";\n\n  return (\n    <>\n    <Tabs defaultValue=\"pos\" value={activeTab} onValueChange={setActiveTab} className=\"w-full h-full flex flex-col\">\n       <header className=\"bg-card border-b sticky top-0 z-50 shadow-sm\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex items-center justify-between h-16\">\n              <Link href=\"/\" className=\"flex items-center gap-2 text-lg font-headline font-semibold\">\n                <ItbIcon className=\"h-8 w-8\" />\n                <span className=\"text-xl text-primary font-bold\">ITB Members</span>\n              </Link>\n              \n              <TabsList className=\"inline-grid h-12 w-full max-w-2xl grid-cols-4 bg-muted p-1 rounded-lg\">\n                <TabsTrigger value=\"pos\" className=\"h-10 text-base gap-2 rounded-md data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-sm\">\n                  <LayoutDashboard className=\"h-5 w-5\" />\n                  Point of Sale\n                </TabsTrigger>\n                <TabsTrigger value=\"checks\" className=\"h-10 text-base gap-2 rounded-md data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-sm\">\n                  <ClipboardCheck className=\"h-5 w-5\" />\n                  Open Checks\n                </TabsTrigger>\n                <TabsTrigger value=\"progress\" className=\"h-10 text-base gap-2 rounded-md data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-sm\">\n                  <ClipboardList className=\"h-5 w-5\" />\n                  Order Progress\n                </TabsTrigger>\n                <TabsTrigger value=\"members\" className=\"h-10 text-base gap-2 rounded-md data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-sm\">\n                  <Users className=\"h-5 w-5\" />\n                  Members\n                </TabsTrigger>\n              </TabsList>\n\n              <div className=\"flex items-center gap-2\">\n                 <Button variant=\"ghost\" size=\"icon\" asChild>\n                    <Link href=\"/admin\" aria-label=\"Admin Portal\">\n                        <Settings className=\"h-5 w-5\" />\n                    </Link>\n                </Button>\n                <ThemeToggle />\n                <Button variant=\"ghost\" size=\"icon\" onClick={handleLogout} aria-label=\"Log Out\">\n                  <LogOut className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n      <div className=\"flex-grow min-h-0 container mx-auto p-4 md:p-8\">\n        <TabsContent value=\"pos\" className=\"flex-grow min-h-0 h-full mt-0\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-5 xl:grid-cols-3 gap-8 h-full\">\n            <div className=\"lg:col-span-3 xl:col-span-2 h-full flex flex-col\">\n              <MenuDisplay categories={categories} menuItems={menuItems} onAddItem={handleAddItem} />\n            </div>\n            <div className=\"lg:col-span-2 xl:col-span-1 h-full\">\n              <OrderSummary\n                activeCheck={activeCheck}\n                checks={checks}\n                onUpdateQuantity={handleUpdateQuantity}\n                onRemoveItem={handleRemoveItem}\n                onNewCheck={handleNewCheck}\n                onSendToKitchen={handleSendToKitchen}\n                onCloseCheck={handleCloseCheck}\n                onClearCheck={handleClearCheck}\n                onCustomizeItem={handleStartCustomization}\n                onSwitchCheck={handleSwitchCheck}\n                onUpdateDetails={updateActiveCheck}\n                priceLists={settings.priceLists}\n                taxRate={settings.taxRate}\n              />\n            </div>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"checks\" className=\"flex-grow min-h-0 h-full mt-0\">\n            <OpenChecksDisplay \n                checks={checks} \n                activeCheckId={activeCheckId} \n                onSelectCheck={handleSelectCheckAndSwitchTab}\n                priceLists={settings.priceLists}\n                taxRate={settings.taxRate}\n            />\n        </TabsContent>\n        \n        <TabsContent value=\"progress\" className=\"flex-grow min-h-0 h-full mt-0\">\n          <OrderProgress orders={activeOrders} onCompleteOrder={handleCompleteOrder} onClearOrder={handleClearOrder} />\n        </TabsContent>\n\n        <TabsContent value=\"members\" className=\"h-full mt-0\">\n          <MembersList members={members} />\n        </TabsContent>\n      </div>\n\n\n      <AlertDialog open={isCloseCheckAlertOpen} onOpenChange={setCloseCheckAlertOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"font-headline\">Confirm Action</AlertDialogTitle>\n            <AlertDialogDescription>\n                {closeCheckAlertDescription}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleFinalizeAndPay}>Yes, Confirm</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n    </Tabs>\n    <CustomizeItemDialog \n        item={customizingItem}\n        availableExtras={availableExtras}\n        onClose={() => setCustomizingItem(null)}\n        onSave={handleUpdateCustomization}\n    />\n    </>\n  );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}